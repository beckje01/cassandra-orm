There are a number of places where GORM method argument conventions have have been extended or altered because of the
features and limitations of Cassandra.  One of the most commonly encountered is in the paging of query results where
Cassandra does not support the concept of an integer _offset_, but rather accepts a key value from which to make the next
query.  The departures from GORM syntax are described below.

h4. Paging of query results

Queries for objects can be constrained with the following options:

{table}
start | The _id_ of the first object to return
startAfter | The _id_ of the object before the first object to return
finish | The _id_ of the last object to return
max | The maximum number of objects to return
reversed | Query for objects from last to first rather than first to last
{table}


{code}
def firstFive = Visit.list(max: 5)
def nextFive = Visit.list(startAfter: firstFive[-1].id, max: 5)
def lastFive = Visit.list(max: 5, reversed: true)
def nextToLastFive = Visit.list(startAfter: lastFive[-1].id, max: 5, reversed: true)
{code}

These parameters appy to the _list()_ and  _findAll..._ class methods.  They can also be used to limit the results
returned from _hasMany_ relationships. For example, given the definition:

{code}
class Person
{
    List posts
    static hasMany = [posts: Post]
    ...
}
{code}

you can perform the following queries:

{code}




